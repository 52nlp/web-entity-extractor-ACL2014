#!/usr/bin/ruby

require './fig/lib/execrunner'

system "mkdir -p state/execs"
system "mkdir -p cache"

run!(
  # For running in a queue
  letDefault(:q, 0), sel(:q, l(), l('fig/bin/q', '-shareWorkingPath', o('mem', '5g'), o('memGrace', 10), '-add', '---')),

  # Profiling
  letDefault(:prof, 0), sel(:prof, l(), '-Xrunhprof:cpu=samples,depth=100,file=_OUTPATH_/java.hprof.txt'),

  'fig/bin/qcreate', o('statePath', 'state'),
  'java', '-cp', 'classes:lib/*',

  # Set memory size
  letDefault(:memsize, 'tiny'),
  sel(:memsize, {
    'tiny' => l('-Xms2G', '-Xmx4G'),
    'low' => l('-Xms12G', '-Xmx20G'),
    'medium' => l('-Xms24G', '-Xmx30G'),
    'high' => l('-Xms36G', '-Xmx50G'),
    'higher' => l('-Xms48G', '-Xmx70G'),
    'impressive' => l('-Xms60G', '-Xmx90G'),
  }),

  # Determine class to load
  sel(:mode, {
    'main' => l(
      'edu.stanford.nlp.semparse.open.Main',
    nil),
    'baseline' => l(
      'edu.stanford.nlp.semparse.open.experiment.Experiments',
      o('experiment', 'baseline'), let(:feat, 'none'),
    nil),
    'interactive' => l(
      'edu.stanford.nlp.semparse.open.Main',
      let(:feat, 'none'),
      let(:data, 'interactive'),
    nil),
  }),

  # For fig
  o('execDir', '_OUTPATH_'), o('overwriteExecDir'),
  o('addToView', 0),

  o('numThreads', 1),
  o('numTrainIters', 5),
  o('featureMinimumCount', 0),  # Disable pruning as default
  o('pruneSmallFeaturesThreshold', 0),  # Disable pruning as default
  o('beta', 0.01),

  # Features
  sel(:feat, {
    'none' => l(o('useAllFeatures', false)),
    'structural' => l(o('useAllFeatures', false), o('include', 'self-or-ancestors', 'node-range', 'hole')),
    'denotation' => l(o('useAllFeatures', false), o('include', 'entity', 'ling')),
    'default' => l(
      o('useAllFeatures', false),
      o('include', 'self-or-ancestors', 'node-range', 'hole', 'entity', 'ling'),
      o('featureMinimumCount', 2),
    nil),
  }),

  sel(0,
    l(), # Don't use word clusters
    l(o('brownClusterFilename', 'lib/wordreprs/brown-rcv1.clean.tokenized-CoNLL03.txt-c1000-freq1.txt')), # Turian et al.
  nil),

  sel(0,
    l(), # Don't use word vectors
    l(o('wordVectorFilename', 'lib/wordreprs/embeddings-scaled.EMBEDDING_SIZE=50.txt')), # Turian et al.
    l(o('wordVectorFilename', 'lib/cbow.vectors'), o('wordVectorUNKindex', -1)), # CBOW (word2vec)
  nil),

  sel(0,
    l(), # Don't use frequency table
    l(o('frequencyFilename', 'lib/ling-data/webFrequency.tsv')), # default
  nil),

  sel(0,
    l(), # Don't use wordnet clusters
    l(o('wordnetClusterFilename', 'lib/ling-data/wordnet/newer-30')), # default
  nil),

  sel(1,
    l(), # Don't use query types
    l(o('queryTypeFilename', 'lib/ling-data/queryType.tsv')), # default
  nil),

  sel(1,
    l(),
    l(o('lateNorm', 3), o('targetNorm', 3)),
  nil),

  # Dataset
  sel(:data, {
    'debug' => l(
      o('dataset', 'openweb.debug'),
    nil),

    'dev' => l(
      o('dataset', 'openweb.train'),
    nil),

    'real' => l(
      o('dataset', 'openweb.train@test'),
    nil),

    'custom' => l(),
    'interactive' => l(),
  }),

nil)
